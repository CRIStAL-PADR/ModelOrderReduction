# -*- coding: utf-8 -*-

import os
import sys

#	STLIB IMPORT
from stlib.scene import MainHeader
from stlib.solver import DefaultSolver
from stlib.physics.deformable import ElasticMaterialObject
from stlib.physics.constraints import FixedBox
from stlib.animation import AnimationManager , animate


# SOFTROBOTS IMPORT
from softrobots.actuators import PullingCable

# MOR IMPORT
from mor.animation import DefaultShaking

dt = $DT
maxPull = $MAXPULL
breathTime = $BREATHTIME
increment = $INCREMENT
phase = $PHASE
timeExe = $nbIterations * dt
actuatorsParam = $ACTUATORPARAM

meshPath = '/home/felix/SOFA/plugin/ModelOrderReduction/examples/Model_Reduction/1_INPUT/Mesh_Model/'

print "Scene Phase :",phase
print "Scene nbIterations :",$nbIterations 
print "timeExe :",timeExe

class SingletonTmp(object):
	def __init__(self, breathTime):
		self.tmp = list(breathTime)

mySingleton = SingletonTmp(breathTime)
stateFileName = "stateFile"

def createScene(rootNode):

	rootNode = MainHeader(rootNode, plugins=["SofaPython","SoftRobots"], gravity=[0.0,0.0,-9810], dt=dt)

	modelNode = ElasticMaterialObject(
		attachedTo=rootNode,
		volumeMeshFileName=meshPath+'siliconeV0.vtu',
		name='modelNode',
        rotation=[90, 0.0, 0.0],
        translation=[0.0, 0.0, 35],
		totalMass=0.5,
		withConstrain=False,
		poissonRatio=0.45,
		youngModulus=450)
	
	modelNode.createObject('GenericConstraintCorrection', solverName='Solver')
	modelNode.createObject('WriteState', filename=stateFileName+".state", period='0.1',writeX="1", writeX0="", writeV="0") 
    
	FixedBox(
		atPositions=[-15, -15, -40,  15, 15, 10],
		applyTo=modelNode,
		doVisualization=True) 	

	AnimationManager(modelNode)

	for i in range(len(actuatorsParam)):
		cable = PullingCable(
					attachedTo=modelNode,
					name=actuatorsParam[i]['withName'],
					cableGeometry=actuatorsParam[i]['withCableGeometry'],
					pullPointLocation=actuatorsParam[i]['withAPullPointLocation'],
					valueType="displacement")

		animate(DefaultShaking, {
							"target" : cable ,
							"phaseTest" : phase, 
							"actuatorNb" : i,
							"actuatorMaxPull" : maxPull[i],
							"actuatorBreathTime" : breathTime[i],
							"actuatorIncrement" : increment[i],
							"breathTimeCounter" : mySingleton}, timeExe)

	return rootNode 