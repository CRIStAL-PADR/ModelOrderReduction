# -*- coding: utf-8 -*-

import os
import sys

#	STLIB IMPORT
from stlib.scene import MainHeader
from stlib.solver import DefaultSolver
from stlib.physics.deformable import ElasticMaterialObject
from stlib.physics.constraints import FixedBox
from stlib.animation import AnimationManager , animate


# SOFTROBOTS IMPORT
from softrobots.actuators import PullingCable

dt = $DT
maxPull = $MAXPULL
breathTime = $BREATHTIME
increment = $INCREMENT
phase = $PHASE
timeExe = $nbIterations * dt
stateFileName = "stateFile"
for i in range(len(phase)):
	stateFileName = stateFileName + str(phase[i])

actuatorsParam = [
		{'withName' : 'nord',
		 'withCableGeometry' : [[0, 97, 45]],
		 'withAPullPointLocation' : [0, 10, 30]
		},
		{'withName' : 'ouest',
		 'withCableGeometry' : [[-97, 0, 45]],
		 'withAPullPointLocation' : [-10, 0, 30]
		},
		{'withName' : 'sud',
		 'withCableGeometry' : [[0, -97, 45]],
		 'withAPullPointLocation' : [0, -10, 30]
		},
		{'withName' : 'est',
		 'withCableGeometry' : [[97, 0, 45]],
		 'withAPullPointLocation' : [10, 0, 30]
		}
	]

meshPath = '/home/felix/SOFA/plugin/ModelOrderReduction/examples/Model_Reduction/1_INPUT/Mesh_Model/'
tmp = [0,0,0,0]
print "Scene Phase :",phase

def myAnimate(target, factor, phaseTest, actuatorNb):
	global tmp
	actuatorMaxPull = maxPull[actuatorNb]
	actuatorBreathTime = breathTime[actuatorNb]
	actuatorIncrement = increment[actuatorNb]

	if actuatorBreathTime == tmp[actuatorNb]:
		actualValue = target.getObject('CableConstraint').findData('value').value[0][0]	
		print(	"For Actuator : ", 		target.name,
				"with actualValue :", 	actualValue,
				"a maxPull of :", 		maxPull,
				"& INCREMENT :", 		actuatorIncrement)

		if phaseTest[actuatorNb] == 1:
			if actualValue < actuatorMaxPull:
				print "		INCREMENT ++"
				actualValue = actualValue + actuatorIncrement
			else:
				print "Done for :",target.name
		else:
			if actualValue >= actuatorIncrement:
				print "		INCREMENT --"
				actualValue = actualValue - actuatorIncrement
			else:
				print "Done for :",target.name

		print "Updated Value :",actualValue
		target.getObject('CableConstraint').findData('value').value = actualValue
		tmp[actuatorNb] = 0

	else:
		tmp[actuatorNb] += 1

def createScene(rootNode):

	rootNode = MainHeader(rootNode, plugins=["SofaPython","SoftRobots","ModelOrderReduction"], gravity=[0.0,0.0,-9.810], dt=dt)

	modelNode = ElasticMaterialObject(
		attachedTo=rootNode,
		fromVolumeMesh=meshPath+'siliconeV0.vtu',
		withName='modelNode',
        withRotation=[90, 0.0, 0.0],
        withTranslation=[0.0, 0.0, 35],
		withTotalMass=0.5)
	
	modelNode.createObject('GenericConstraintCorrection', solverName='Solver')
	modelNode.createObject('WriteState', filename=stateFileName+".state", period='0.1',writeX="1", writeX0="", writeV="0") 
    
	FixedBox(
		atPositions=[-15, -15, -40,  15, 15, 10],
		applyTo=modelNode,
		withVisualization=True) 	

	AnimationManager(modelNode)

	for i in range(len(actuatorsParam)):
		cable = PullingCable(
					attachedTo=modelNode,
					withName=actuatorsParam[i]['withName'],
					withCableGeometry=actuatorsParam[i]['withCableGeometry'],
					withAPullPointLocation=actuatorsParam[i]['withAPullPointLocation'],
					withValueAs="displacement")

		animate(myAnimate, {
							"target" : cable ,
							"phaseTest" : phase, 
							"actuatorNb" : i}, timeExe)

	return rootNode 
