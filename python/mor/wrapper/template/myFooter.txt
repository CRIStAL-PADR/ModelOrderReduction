
    ## Visualization
    if surfaceMeshFileName:
	    visu = myReducedModel.createChild('Visual')

	    visu.createObject(	'OglModel', 
	    					filename=path+'/mesh/'+surfaceMeshFileName,
                            template='ExtVec3f',
                            color=surfaceColor,
                            rotation= add(rotation,arg1),
                            translation = add(translation,arg2),
                            scale3d = multiply(scale,arg3))

	    visu.createObject('BarycentricMapping')

    return myReducedModel


#   STLIB IMPORT
from stlib.scene import MainHeader
def createScene(rootNode):
    surfaceMeshFileName = ''

    MainHeader(rootNode,plugins=["SofaPython","SoftRobots","ModelOrderReduction"],
                        dt=1,
                        gravity=[0.0,0.0,-9810])

    translate = 300
    rotationBlue = 60.0
    rotationWhite = 80
    rotationRed = 70

    for i in range(3):

        MyReducedModel(rootNode,
                        name="MyReducedModel_blue", 
                        rotation=[rotationBlue*i, 0.0, 0.0],
                        translation=[i*translate, 0.0, 0.0],
                        surfaceColor=[0.0, 0.0, 1, 0.5],
                        surfaceMeshFileName=surfaceMeshFileName)
    for i in range(3):

        MyReducedModel(rootNode,
                        name="MyReducedModel_white", 
                        rotation=[0.0, rotationWhite*i, 0.0],
                        translation=[i*translate, translate, -translate],
                        surfaceColor=[0.5, 0.5, 0.5, 0.5],
                        surfaceMeshFileName=surfaceMeshFileName)

    for i in range(3):

        MyReducedModel(rootNode,
                        name="MyReducedModel_red", 
                        rotation=[0.0, 0.0, i*rotationRed],
                        translation=[i*translate, 2*translate, -2*translate],
                        surfaceColor=[1, 0.0, 0.0, 0.5],
                        surfaceMeshFileName=surfaceMeshFileName)
