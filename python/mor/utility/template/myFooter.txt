
    ## Visualization
    if surfaceMeshFileName:
        visu = myReducedModel.createChild('Visual')
        meshType = surfaceMeshFileName.split('.')[-1]
        if meshType == 'stl':
            visu.createObject(  'MeshSTLLoader', name= 'loader', filename=path+'/mesh/'+surfaceMeshFileName)
        elif meshType == 'obj':
            visu.createObject(  'MeshObjLoader', name= 'loader', filename=path+'/mesh/'+surfaceMeshFileName)

        visu.createObject(	'OglModel',
                            src='@loader',
                            template='ExtVec3f',
                            color=surfaceColor,
                            rotation= add(rotation,arg1),
                            translation = add(translation,arg2),
                            scale3d = multiply(scale,arg3))

        visu.createObject('BarycentricMapping')

    return myReducedModel


#   STLIB IMPORT
from stlib.scene import MainHeader
def createScene(rootNode):
    surfaceMeshFileName = False

    MainHeader(rootNode,plugins=["SofaPython","SoftRobots","ModelOrderReduction"],
                        dt=DT,
                        gravity=GRAVITY)
    rootNode.VisualStyle.displayFlags="showForceFields"
    
    MyReducedModel(rootNode,
                        name="MyReducedModel",
                        surfaceMeshFileName=surfaceMeshFileName)
#    translate = 300
#    rotationBlue = 60.0
#    rotationWhite = 80
#    rotationRed = 70
#
#    for i in range(3):
#
#        MyReducedModel(rootNode,
#                        name="MyReducedModel_blue_"+str(i),
#                        rotation=[rotationBlue*i, 0.0, 0.0],
#                        translation=[i*translate, 0.0, 0.0],
#                        surfaceColor=[0.0, 0.0, 1, 0.5],
#                        surfaceMeshFileName=surfaceMeshFileName)
#    for i in range(3):
#
#        MyReducedModel(rootNode,
#                        name="MyReducedModel_white_"+str(i),
#                        rotation=[0.0, rotationWhite*i, 0.0],
#                        translation=[i*translate, translate, -translate],
#                        surfaceColor=[0.5, 0.5, 0.5, 0.5],
#                        surfaceMeshFileName=surfaceMeshFileName)
#
#    for i in range(3):
#
#        MyReducedModel(rootNode,
#                        name="MyReducedModel_red_"+str(i),
#                        rotation=[0.0, 0.0, i*rotationRed],
#                        translation=[i*translate, 2*translate, -2*translate],
#                        surfaceColor=[1, 0.0, 0.0, 0.5],
#                        surfaceMeshFileName=surfaceMeshFileName)
